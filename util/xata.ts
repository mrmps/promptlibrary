// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "prompts",
    columns: [
      { name: "id", type: "string" },
      { name: "prompt", type: "string" },
      { name: "score", type: "int" },
      { name: "category", type: "string" },
      { name: "img_url", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Prompts = InferredTypes["prompts"];
export type PromptsRecord = Prompts & XataRecord;

export type DatabaseSchema = {
  prompts: PromptsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Michael-R-s-workspace-oog6cs.us-west-2.xata.sh/db/prompts",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};


 // { name: "name", type: "string" },
      // { name: "alternativeNames", type: "multiple" },
      // { name: "console", type: "string" },
      // { name: "slug", type: "string" },
      // { name: "firstReleaseDate", type: "string" },
      // { name: "storyline", type: "text" },
      // { name: "summary", type: "text" },
      // { name: "totalRatingCount", type: "int" },
      // { name: "totalRating", type: "float" },
      // { name: "url", type: "string" },
      // { name: "igdbId", type: "int" },
      // { name: "cover", type: "string" },
      // { name: "screenshots", type: "multiple" },
      // { name: "franchise", type: "string" },
      // { name: "genres", type: "multiple" },
      // { name: "videos", type: "multiple" },